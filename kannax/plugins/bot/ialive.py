"""Fun plugin"""

import asyncio

from pyrogram import __version__ as __pyro_version__
from pyrogram import filters
from pyrogram.errors import BadRequest, Forbidden
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from kannax import Config, Message, get_version, kannax, get_collection
from kannax.core.ext import RawClient
from kannax.versions import __python_version__
from kannax.plugins.utils.telegraph import upload_media_
from kannax.utils import rand_array


SAVED_SETTINGS = get_collection("CONFIGS")
SAVED = get_collection("ALIVE_DB")

LOGGER = kannax.getLogger(__name__)

media_ = None


async def _init() -> None:
    _AliveMsg = await SAVED.find_one({"_id": "CUSTOM_MSG"})
    if _AliveMsg:
        ALIVE_MSG = _AliveMsg["data"]
    media_ = await SAVED_SETTINGS.find_one({"_id": "ALIVE_MEDIA"})
    if media_:
        Config.NEW_ALIVE_MEDIA = media_["url"]
        Config.ALIVE_MEDIA_TYPE = media_["type"]
    else:
        Config.NEW_ALIVE_MEDIA = "https://telegra.ph/file/4e956ef52c931570fb110.png"
        Config.ALIVE_MEDIA_TYPE = "photo"


@kannax.on_cmd(
    "setimedia",
    about={
        "header": "set alive media",
        "flags": {
            "-c": "check alive media.",
            "-r": "reset alive media.",
        },
        "usage": "{tr}setimedia [reply media]",
    },
)
async def set_alive_media(message: Message):
    """set alive media"""
    found = await SAVED_SETTINGS.find_one({"_id": "ALIVE_MEDIA"})
    if "-c" in message.flags:
        if found:
            media_ = found["url"]
        else:
            media_ = "https://telegra.ph/file/4e956ef52c931570fb110.png"
        return await message.edit(f"[<b>Esta</b>]({media_}) √© sua Alive Media atual")
    elif "-r" in message.flags:
        if not found:
            return await message.edit("`Voc√™ ainda n√£o definiu nenhuma media para ialive.`", del_in=5)
        await SAVED_SETTINGS.delete_one({"_id": "ALIVE_MEDIA"})
        await message.edit("`Alive Media foi resetada para o padr√£o. Reiniciando...`", del_in=5)
        asyncio.get_event_loop().create_task(kannax.restart())
    reply_ = message.reply_to_message
    if not reply_:
        return await message.edit(
            "`Responda a alguma Media para defini-la como seu Alive.`", del_in=5
        )
    type_ = msg_type_alive(reply_)
    if type_ not in ["gif", "photo", "video"]:
        return await message.edit("`Formato n√£o suportado.`", del_in=5)
    link_ = await upload_media_(message)
    whole_link = f"https://telegra.ph{link_}"
    await SAVED_SETTINGS.update_one(
        {"_id": "ALIVE_MEDIA"}, {"$set": {"url": whole_link}}, upsert=True
    )
    await SAVED_SETTINGS.update_one(
        {"_id": "ALIVE_MEDIA"}, {"$set": {"type": type_}}, upsert=True
    )
    await message.edit(
        f"`Alive media definida. O bot esta reiniciando aguarde 5 segundos...`"
    )
    asyncio.get_event_loop().create_task(kannax.restart())


@kannax.on_cmd("ialive", about={"header": "Just For Fun"}, allow_channels=False)
async def alive_inline(message: Message):
    try:
        if message.client.is_bot:
            await send_alive_message(message)
        elif kannax.has_bot:
            try:
                await send_inline_alive(message)
            except BadRequest:
                await send_alive_message(message)
        else:
            await send_alive_message(message)
    except Exception as e_all:
        await message.err(str(e_all), del_in=10, log=__name__)


async def send_alive_message(message: Message) -> None:
    global _USER_CACHED_MEDIA, _BOT_CACHED_MEDIA
    chat_id = message.chat.id
    client = message.client
    caption = await Bot_Alive.alive_info()
    if client.is_bot:
        reply_markup = Bot_Alive.alive_buttons()
    else:
        reply_markup = None
    if Config.ALIVE_MEDIA_TYPE == "photo":
        await client.send_photo(
            chat_id,
            photo=Config.NEW_ALIVE_MEDIA,
            caption=caption,
            reply_markup=reply_markup,
        )
    elif Config.ALIVE_MEDIA_TYPE == "gif" or "video":
        await client.send_animation(
            chat_id,
            animation=Config.NEW_ALIVE_MEDIA,
            caption=caption,
            reply_markup=reply_markup,
        )


async def send_inline_alive(message: Message) -> None:
    _bot = await kannax.bot.get_me()
    try:
        i_res = await kannax.get_inline_bot_results(_bot.username, "alive")
        i_res_id = (
            (
                await kannax.send_inline_bot_result(
                    chat_id=message.chat.id,
                    query_id=i_res.query_id,
                    result_id=i_res.results[0].id,
                )
            )
            .updates[0]
            .id
        )
    except (Forbidden, BadRequest) as ex:
        await message.err(str(ex), del_in=5)
        return
    await message.delete()
    await asyncio.sleep(200)
    await kannax.delete_messages(message.chat.id, i_res_id)


def msg_type_alive(message):
    type_ = "text"
    if message.audio:
        type_ = "audio"
    elif message.animation:
        type_ = "gif"
    elif message.photo:
        type_ = "photo"
    elif message.sticker:
        type_ = "sticker"
    elif message.video:
        type_ = "video"
    elif message.document.file_name.endswith((".gif", ".mp4", "webm")):
        type_ = "gif"
    elif message.document.file_name.endswith((".jpeg", ".png", ".jpg", "webp")):
        type_ = "photo"
    return type_


if kannax.has_bot:

    @kannax.bot.on_callback_query(filters.regex(pattern=r"^status_alive$"))
    async def status_alive_(_, c_q: CallbackQuery):
        c_q.from_user.id
        await c_q.answer(
            f"""
‚ñ´Ô∏è Modo :  {Bot_Alive._get_mode()}
‚ñ´Ô∏è Uptime  :  {kannax.uptime}
‚ñ´Ô∏è Python  :  v{__python_version__}
‚ñ´Ô∏è Version  :  v{get_version()}
‚ñ´Ô∏è Pyrogram  :  v{__pyro_version__}
""", show_alert=True,
        )
        return status_alive_

    @kannax.bot.on_callback_query(filters.regex(pattern=r"^settings_btn$"))
    async def alive_cb(_, c_q: CallbackQuery):
        alive_s = "‚ûï ·¥ò ü·¥ú…¢…™…¥s + : {}\n".format(
            _parse_arg(Config.LOAD_UNOFFICIAL_PLUGINS)
        )
        alive_s += f"üë• ·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç : {_parse_arg(Config.SUDO_ENABLED)}\n"
        alive_s += f"üö® ·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç : {_parse_arg(Config.ANTISPAM_SENTRY)}\n"
        if Config.HEROKU_APP and Config.RUN_DYNO_SAVER:
            alive_s += "‚õΩÔ∏è ·¥Ö è…¥·¥è :  ‚úÖ ·¥Ä·¥õ…™·¥†·¥Ä·¥Ö·¥è\n"
        alive_s += f"üí¨  ô·¥è·¥õ Íú∞·¥°·¥Ö : {_parse_arg(Config.BOT_FORWARDS)}\n"
        alive_s += f"üõ° ·¥ò·¥ç  ô ü·¥è·¥Ñ·¥ã : {_parse_arg(not Config.ALLOW_ALL_PMS)}\n"
        alive_s += f"üìù  ü·¥è…¢ ·¥ò·¥ç : {_parse_arg(Config.PM_LOGGING)}"
        await c_q.answer(alive_s, show_alert=True)
        await asyncio.sleep(0.5)


def _parse_arg(arg: bool) -> str:
    return " ‚úÖ ·¥Ä·¥õ…™·¥†·¥Ä·¥Ö·¥è" if arg else " ‚ùé ·¥Ö·¥ás·¥Ä·¥õ…™·¥†·¥Ä·¥Ö·¥è"


class Bot_Alive:
    @staticmethod
    async def alive_info() -> str:
        _findamsg = await SAVED.find_one({"_id": "ALIVE_MSG"})
        if _findamsg is None:
            mmsg = rand_array(FRASES)
        else:
            mmsg = _findamsg.get("data")
        alive_info_ = f"""
·¥è…™ ·¥ç·¥ás·¥õ Ä·¥á, ·¥ã·¥Ä…¥…¥·¥Äx …™'·¥õs ·¥Ä ü…™·¥†·¥á

{mmsg}
"""
        return alive_info_

    @staticmethod
    def _get_mode() -> str:
        if RawClient.DUAL_MODE:
            return "DUAL"
        if Config.BOT_TOKEN:
            return "BOT"
        return "USER"

    @staticmethod
    def alive_buttons() -> InlineKeyboardMarkup:
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è  ·¥Ñ·¥è…¥Íú∞…™…¢", callback_data="settings_btn"),
                InlineKeyboardButton(
                    text="üí≠  s·¥õ·¥Ä·¥õ·¥ús", callback_data="status_alive"),
            ]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def alive_default_imgs() -> str:
        alive_imgs = [
            "https://telegra.ph/file/4ae6e1ce6a10ba89940fd.gif",
            "https://telegra.ph/file/505c324dd185c6e5ddc69.gif",
            "https://telegra.ph/file/8e99348c3ecdbd23c7a40.gif",
            "https://telegra.ph/file/c64de99e926b05c80eaa6.gif",
            "https://telegra.ph/file/1b0209fcfe45afe2f5f44.gif",
            "https://telegra.ph/file/5e2ae141d3f7d1e303ddf.gif",
            "https://telegra.ph/file/a5f304555673c0b9911a5.gif",
        ]
        return rand_array(alive_imgs)


FRASES = (
    " ü·¥á·¥ç ô Ä·¥á-s·¥á ·¥Ö·¥Ä  ü…™·¥ÑÃß·¥ÄÃÉ·¥è ·¥á …¥·¥ÄÃÉ·¥è ·¥Ö·¥Ä ·¥Ö·¥á·¥Ñ·¥á·¥ò·¥ÑÃß·¥ÄÃÉ·¥è.",
    "·¥†·¥è·¥Ñ·¥áÃÇ …¥·¥ÄÃÉ·¥è ·¥Ñ·¥è…¥ ú·¥á·¥Ñ·¥á ·¥Äs ·¥ò·¥áss·¥è·¥Äs, ·¥†·¥è·¥Ñ·¥áÃÇ ·¥Ñ·¥è…¥ ú·¥á·¥Ñ·¥á ·¥Ä·¥ò·¥á…¥·¥Äs ·¥è «´·¥ú·¥á ·¥á ü·¥Äs ·¥ò·¥á Ä·¥ç…™·¥õ·¥á·¥ç «´·¥ú·¥á ·¥†·¥è·¥Ñ·¥áÃÇ ·¥†·¥á·¥ä·¥Ä.",
    "·¥Äs ·¥†·¥á·¥¢·¥ás ·¥Äs «´·¥ú·¥ás·¥õ·¥èÃÉ·¥ás s·¥ÄÃÉ·¥è ·¥Ñ·¥è·¥ç·¥ò ü…™·¥Ñ·¥Ä·¥Ö·¥Äs ·¥á ·¥Äs  Ä·¥ás·¥ò·¥ès·¥õ·¥Äs s·¥ÄÃÉ·¥è s…™·¥ç·¥ò ü·¥ás.",
    "·¥Ä·¥ç·¥Ä Ä ·¥Ä ü…¢·¥ú·¥áÃÅ·¥ç ·¥ò Ä·¥èÍú∞·¥ú…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥á  ü ú·¥á ·¥Ö·¥ÄÃÅ Íú∞·¥è Ä·¥ÑÃß·¥Ä; s·¥á Ä ·¥Ä·¥ç·¥Ä·¥Ö·¥è ·¥ò Ä·¥èÍú∞·¥ú…¥·¥Ö·¥Ä·¥ç·¥á…¥·¥õ·¥á  ü ú·¥á ·¥Ö·¥ÄÃÅ ·¥Ñ·¥è Ä·¥Ä…¢·¥á·¥ç.",
    "·¥†·¥è·¥Ñ·¥áÃÇ …¥·¥ÄÃÉ·¥è ·¥áÃÅ ·¥Ö·¥á Ä Ä·¥è·¥õ·¥Ä·¥Ö·¥è «´·¥ú·¥Ä…¥·¥Ö·¥è ·¥ò·¥á Ä·¥Ö·¥á, ·¥ç·¥Äs s…™·¥ç «´·¥ú·¥Ä…¥·¥Ö·¥è ·¥†·¥è·¥Ñ·¥áÃÇ ·¥Ö·¥ás…™s·¥õ·¥á.",
    " ú·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ·¥ès «´·¥ú·¥á ·¥†·¥è·¥Ñ·¥áÃÇ ·¥ò Ä·¥á·¥Ñ…™s·¥Ä ·¥Ö·¥ás…™s·¥õ…™ Ä ·¥Ö·¥á ·¥Ä ü…¢·¥ú·¥ç·¥Ä ·¥Ñ·¥è…™s·¥Ä ·¥ò·¥Ä Ä·¥Ä ·¥ò Ä·¥ás·¥á Ä·¥†·¥Ä Ä ·¥Ä ·¥è·¥ú·¥õ Ä·¥Ä.",
    "·¥Ä ·¥†…™·¥Ö·¥Ä ·¥Ö·¥Äs ·¥ò·¥áss·¥è·¥Äs …¥·¥ÄÃÉ·¥è ·¥Ä·¥Ñ·¥Ä ô·¥Ä «´·¥ú·¥Ä…¥·¥Ö·¥è ·¥á ü·¥Äs ·¥ç·¥è Ä Ä·¥á·¥ç, ·¥ç·¥Äs s…™·¥ç «´·¥ú·¥Ä…¥·¥Ö·¥è ·¥ò·¥á Ä·¥Ö·¥á·¥ç ·¥Ä Íú∞·¥áÃÅ.",
    "s·¥á ·¥†·¥è·¥Ñ·¥áÃÇ ·¥ás·¥õ·¥ÄÃÅ ·¥†…™·¥†·¥è ·¥ò·¥è·¥Ö·¥á  Ä·¥á·¥Ñ·¥è·¥ç·¥á·¥ÑÃß·¥Ä Ä. …¥…™…¥…¢·¥ú·¥áÃÅ·¥ç ·¥õ·¥á·¥ç ·¥è ·¥Ö…™ Ä·¥á…™·¥õ·¥è ·¥Ö·¥á ·¥õ·¥á ·¥õ…™ Ä·¥Ä Ä …™ss·¥è.",
    "·¥è ·¥ò·¥áss…™·¥ç…™s·¥ç·¥è, ·¥Ö·¥á·¥ò·¥è…™s ·¥Ö·¥á ·¥†·¥è·¥Ñ·¥áÃÇ s·¥á ·¥Ä·¥Ñ·¥ès·¥õ·¥ú·¥ç·¥Ä Ä ·¥Ä ·¥á ü·¥á, ·¥áÃÅ ·¥õ·¥ÄÃÉ·¥è ·¥Ä…¢ Ä·¥Ä·¥Ö·¥ÄÃÅ·¥†·¥á ü «´·¥ú·¥Ä…¥·¥õ·¥è ·¥è ·¥è·¥õ…™·¥ç…™s·¥ç·¥è.",
    "·¥ò·¥á Ä·¥Ö·¥è·¥Ä Ä ·¥áÃÅ  ü…™ ô·¥á Ä·¥õ·¥Ä Ä ·¥è ·¥ò Ä…™s…™·¥è…¥·¥á…™ Ä·¥è... ·¥á ·¥Ö·¥ás·¥Ñ·¥è ô Ä…™ Ä «´·¥ú·¥á ·¥è ·¥ò Ä…™s…™·¥è…¥·¥á…™ Ä·¥è ·¥á Ä·¥Ä ·¥†·¥è·¥Ñ·¥áÃÇ.",
    "·¥õ·¥ú·¥Ö·¥è ·¥è «´·¥ú·¥á ·¥ú·¥ç s·¥è…¥ ú·¥è ·¥ò Ä·¥á·¥Ñ…™s·¥Ä ·¥áÃÅ ·¥Ä ü…¢·¥ú·¥áÃÅ·¥ç «´·¥ú·¥á ·¥Ä·¥Ñ Ä·¥á·¥Ö…™·¥õ·¥á «´·¥ú·¥á ·¥á ü·¥á ·¥ò·¥èss·¥Ä s·¥á Ä  Ä·¥á·¥Ä ü…™·¥¢·¥Ä·¥Ö·¥è.",
    "…¥·¥ÄÃÉ·¥è ·¥ás·¥ò·¥á Ä·¥á ·¥ò·¥è Ä ·¥ú·¥ç·¥Ä ·¥Ñ Ä…™s·¥á ·¥ò·¥Ä Ä·¥Ä ·¥Ö·¥ás·¥Ñ·¥è ô Ä…™ Ä ·¥è «´·¥ú·¥á ·¥áÃÅ …™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ·¥á ·¥á·¥ç s·¥ú·¥Ä ·¥†…™·¥Ö·¥Ä.",
    "·¥è ·¥ò·¥áss…™·¥ç…™s·¥ç·¥è, ·¥Ö·¥á·¥ò·¥è…™s ·¥Ö·¥á ·¥†·¥è·¥Ñ·¥áÃÇ s·¥á ·¥Ä·¥Ñ·¥ès·¥õ·¥ú·¥ç·¥Ä Ä ·¥Ä ·¥á ü·¥á, ·¥áÃÅ ·¥õ·¥ÄÃÉ·¥è ·¥Ä…¢ Ä·¥Ä·¥Ö·¥ÄÃÅ·¥†·¥á ü «´·¥ú·¥Ä…¥·¥õ·¥è ·¥è ·¥è·¥õ…™·¥ç…™s·¥ç·¥è.",
    "·¥Ö·¥ás·¥Ñ·¥è ô Ä…™ Ä ·¥Ñ·¥è…¥s…™s·¥õ·¥á ·¥á·¥ç ·¥è ü ú·¥Ä Ä ·¥ò·¥Ä Ä·¥Ä ·¥è «´·¥ú·¥á ·¥õ·¥è·¥Ö·¥è ·¥ç·¥ú…¥·¥Ö·¥è ·¥ás·¥õ·¥ÄÃÅ ·¥†·¥á…¥·¥Ö·¥è ·¥á ·¥ò·¥á…¥s·¥Ä Ä ·¥ú·¥ç·¥Ä ·¥Ñ·¥è…™s·¥Ä ·¥Ö…™Íú∞·¥á Ä·¥á…¥·¥õ·¥á.",
    "…¥·¥è Íú∞·¥ú…¥·¥Ö·¥è ·¥Ö·¥á ·¥ú·¥ç  ô·¥ú Ä·¥Ä·¥Ñ·¥è ·¥è·¥ú ·¥Ö·¥á ·¥ú·¥ç ·¥ò·¥è·¥ÑÃß·¥è, ·¥Ä·¥Ñ·¥è…¥·¥õ·¥á·¥Ñ·¥á ·¥Ö·¥ás·¥Ñ·¥è ô Ä…™ Ä-s·¥á ·¥Äs ·¥ás·¥õ Ä·¥á ü·¥Äs.",
)
